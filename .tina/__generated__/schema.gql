# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PagesFilter): PagesConnection!
  article(relativePath: String): Article!
  articleConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ArticleFilter): ArticleConnection!
  author(relativePath: String): Author!
  authorConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AuthorFilter): AuthorConnection!
  category(relativePath: String): Category!
  categoryConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: CategoryFilter): CategoryConnection!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GlobalFilter): GlobalConnection!
}

input DocumentFilter {
  pages: PagesFilter
  article: ArticleFilter
  author: AuthorFilter
  category: CategoryFilter
  global: GlobalFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Pages | Article | Author | Category | Global

type Pages implements Node & Document {
  title: String!
  slug: String
  text: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PagesFilter {
  title: StringFilter
  slug: StringFilter
  text: RichTextFilter
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

union ArticleAdvancedAuthorsAuthor = Author

type ArticleAdvancedAuthors {
  author: ArticleAdvancedAuthorsAuthor
}

union ArticleAdvancedCategoriesCategory = Category

type ArticleAdvancedCategories {
  category: ArticleAdvancedCategoriesCategory
}

type ArticleAdvanced {
  slug: String
  authors: [ArticleAdvancedAuthors]
  image: String
  date: String
  description: String
  categories: [ArticleAdvancedCategories]
  featured: Boolean
}

type Article implements Node & Document {
  title: String!
  subtitle: String
  advanced: ArticleAdvanced
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ArticleAdvancedAuthorsAuthorFilter {
  author: AuthorFilter
}

input ArticleAdvancedAuthorsFilter {
  author: ArticleAdvancedAuthorsAuthorFilter
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ArticleAdvancedCategoriesCategoryFilter {
  category: CategoryFilter
}

input ArticleAdvancedCategoriesFilter {
  category: ArticleAdvancedCategoriesCategoryFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input ArticleAdvancedFilter {
  slug: StringFilter
  authors: ArticleAdvancedAuthorsFilter
  image: ImageFilter
  date: DatetimeFilter
  description: StringFilter
  categories: ArticleAdvancedCategoriesFilter
  featured: BooleanFilter
}

input ArticleBodyCaptionedImageFilter {
  imgUrl: StringFilter
  caption: StringFilter
  alt: StringFilter
}

input ArticleBodyTweetFilter {
  tweetId: StringFilter
}

input ArticleBodyTextBoxFilter {
  text: RichTextFilter
}

input ArticleBodyPullQuoteFilter {
  text: StringFilter
  author: StringFilter
  authorLink: StringFilter
}

input ArticleBodyFilter {
  CaptionedImage: ArticleBodyCaptionedImageFilter
  Tweet: ArticleBodyTweetFilter
  TextBox: ArticleBodyTextBoxFilter
  PullQuote: ArticleBodyPullQuoteFilter
}

input ArticleFilter {
  title: StringFilter
  subtitle: StringFilter
  advanced: ArticleAdvancedFilter
  body: ArticleBodyFilter
}

type ArticleConnectionEdges {
  cursor: String!
  node: Article
}

type ArticleConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ArticleConnectionEdges]
}

type Author implements Node & Document {
  title: String
  slug: String
  email: String
  first_name: String
  twitter: String
  github: String
  linkedin: String
  bio: String
  image: String
  avif: String
  avif_base64: String
  image_base64: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AuthorFilter {
  title: StringFilter
  slug: StringFilter
  email: StringFilter
  first_name: StringFilter
  twitter: StringFilter
  github: StringFilter
  linkedin: StringFilter
  bio: StringFilter
  image: StringFilter
  avif: StringFilter
  avif_base64: StringFilter
  image_base64: StringFilter
}

type AuthorConnectionEdges {
  cursor: String!
  node: Author
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

union CategoryRelatedCategory = Category

type CategoryRelated {
  category: CategoryRelatedCategory
}

type Category implements Node & Document {
  title: String
  slug: String
  related: [CategoryRelated]
  description: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input CategoryRelatedCategoryFilter {
  category: CategoryFilter
}

input CategoryRelatedFilter {
  category: CategoryRelatedCategoryFilter
}

input CategoryFilter {
  title: StringFilter
  slug: StringFilter
  related: CategoryRelatedFilter
  description: StringFilter
}

type CategoryConnectionEdges {
  cursor: String!
  node: Category
}

type CategoryConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [CategoryConnectionEdges]
}

type GlobalHeaderNav {
  href: String
  label: String
}

type GlobalHeader {
  color: String
  nav: [GlobalHeaderNav]
}

type GlobalFooterSocial {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

type GlobalFooter {
  color: String
  social: GlobalFooterSocial
}

type GlobalTheme {
  color: String
  font: String
  icon: String
  darkMode: String
}

type Global implements Node & Document {
  header: GlobalHeader
  footer: GlobalFooter
  theme: GlobalTheme
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input GlobalHeaderNavFilter {
  href: StringFilter
  label: StringFilter
}

input GlobalHeaderFilter {
  color: StringFilter
  nav: GlobalHeaderNavFilter
}

input GlobalFooterSocialFilter {
  facebook: StringFilter
  twitter: StringFilter
  instagram: StringFilter
  github: StringFilter
}

input GlobalFooterFilter {
  color: StringFilter
  social: GlobalFooterSocialFilter
}

input GlobalThemeFilter {
  color: StringFilter
  font: StringFilter
  icon: StringFilter
  darkMode: StringFilter
}

input GlobalFilter {
  header: GlobalHeaderFilter
  footer: GlobalFooterFilter
  theme: GlobalThemeFilter
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
  updateArticle(relativePath: String!, params: ArticleMutation!): Article!
  createArticle(relativePath: String!, params: ArticleMutation!): Article!
  updateAuthor(relativePath: String!, params: AuthorMutation!): Author!
  createAuthor(relativePath: String!, params: AuthorMutation!): Author!
  updateCategory(relativePath: String!, params: CategoryMutation!): Category!
  createCategory(relativePath: String!, params: CategoryMutation!): Category!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
}

input DocumentMutation {
  pages: PagesMutation
  article: ArticleMutation
  author: AuthorMutation
  category: CategoryMutation
  global: GlobalMutation
}

input PagesMutation {
  title: String
  slug: String
  text: JSON
}

input ArticleAdvancedAuthorsMutation {
  author: String
}

input ArticleAdvancedCategoriesMutation {
  category: String
}

input ArticleAdvancedMutation {
  slug: String
  authors: [ArticleAdvancedAuthorsMutation]
  image: String
  date: String
  description: String
  categories: [ArticleAdvancedCategoriesMutation]
  featured: Boolean
}

input ArticleMutation {
  title: String
  subtitle: String
  advanced: ArticleAdvancedMutation
  body: JSON
}

input AuthorMutation {
  title: String
  slug: String
  email: String
  first_name: String
  twitter: String
  github: String
  linkedin: String
  bio: String
  image: String
  avif: String
  avif_base64: String
  image_base64: String
}

input CategoryRelatedMutation {
  category: String
}

input CategoryMutation {
  title: String
  slug: String
  related: [CategoryRelatedMutation]
  description: String
}

input GlobalHeaderNavMutation {
  href: String
  label: String
}

input GlobalHeaderMutation {
  color: String
  nav: [GlobalHeaderNavMutation]
}

input GlobalFooterSocialMutation {
  facebook: String
  twitter: String
  instagram: String
  github: String
}

input GlobalFooterMutation {
  color: String
  social: GlobalFooterSocialMutation
}

input GlobalThemeMutation {
  color: String
  font: String
  icon: String
  darkMode: String
}

input GlobalMutation {
  header: GlobalHeaderMutation
  footer: GlobalFooterMutation
  theme: GlobalThemeMutation
}

schema {
  query: Query
  mutation: Mutation
}
  