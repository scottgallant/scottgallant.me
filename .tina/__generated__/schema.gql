# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  article(relativePath: String): Article!
  articleConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ArticleFilter): ArticleConnection!
  author(relativePath: String): Author!
  authorConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AuthorFilter): AuthorConnection!
  category(relativePath: String): Category!
  categoryConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: CategoryFilter): CategoryConnection!
}

input DocumentFilter {
  article: ArticleFilter
  author: AuthorFilter
  category: CategoryFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Article | Author | Category

union ArticleAuthorsAuthor = Author

type ArticleAuthors {
  author: ArticleAuthorsAuthor
}

union ArticleCategoriesCategory = Category

type ArticleCategories {
  category: ArticleCategoriesCategory
}

type Article implements Node & Document {
  title: String
  subtitle: String
  slug: String
  authors: [ArticleAuthors]
  image: String
  date: String
  description: String
  categories: [ArticleCategories]
  featured: Boolean
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ArticleAuthorsAuthorFilter {
  author: AuthorFilter
}

input ArticleAuthorsFilter {
  author: ArticleAuthorsAuthorFilter
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ArticleCategoriesCategoryFilter {
  category: CategoryFilter
}

input ArticleCategoriesFilter {
  category: ArticleCategoriesCategoryFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input ArticleBodyCaptionedImageFilter {
  imgUrl: StringFilter
  caption: StringFilter
}

input ArticleBodyPullQuoteFilter {
  children: StringFilter
}

input ArticleBodyFilter {
  CaptionedImage: ArticleBodyCaptionedImageFilter
  PullQuote: ArticleBodyPullQuoteFilter
}

input ArticleFilter {
  title: StringFilter
  subtitle: StringFilter
  slug: StringFilter
  authors: ArticleAuthorsFilter
  image: StringFilter
  date: DatetimeFilter
  description: StringFilter
  categories: ArticleCategoriesFilter
  featured: BooleanFilter
  body: ArticleBodyFilter
}

type ArticleConnectionEdges {
  cursor: String!
  node: Article
}

type ArticleConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ArticleConnectionEdges]
}

type Author implements Node & Document {
  title: String
  slug: String
  email: String
  first_name: String
  twitter: String
  github: String
  linkedin: String
  bio: String
  image: String
  avif: String
  avif_base64: String
  image_base64: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AuthorFilter {
  title: StringFilter
  slug: StringFilter
  email: StringFilter
  first_name: StringFilter
  twitter: StringFilter
  github: StringFilter
  linkedin: StringFilter
  bio: StringFilter
  image: StringFilter
  avif: StringFilter
  avif_base64: StringFilter
  image_base64: StringFilter
}

type AuthorConnectionEdges {
  cursor: String!
  node: Author
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

union CategoryRelatedCategory = Category

type CategoryRelated {
  category: CategoryRelatedCategory
}

type Category implements Node & Document {
  title: String
  slug: String
  related: [CategoryRelated]
  description: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input CategoryRelatedCategoryFilter {
  category: CategoryFilter
}

input CategoryRelatedFilter {
  category: CategoryRelatedCategoryFilter
}

input CategoryFilter {
  title: StringFilter
  slug: StringFilter
  related: CategoryRelatedFilter
  description: StringFilter
}

type CategoryConnectionEdges {
  cursor: String!
  node: Category
}

type CategoryConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [CategoryConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateArticle(relativePath: String!, params: ArticleMutation!): Article!
  createArticle(relativePath: String!, params: ArticleMutation!): Article!
  updateAuthor(relativePath: String!, params: AuthorMutation!): Author!
  createAuthor(relativePath: String!, params: AuthorMutation!): Author!
  updateCategory(relativePath: String!, params: CategoryMutation!): Category!
  createCategory(relativePath: String!, params: CategoryMutation!): Category!
}

input DocumentMutation {
  article: ArticleMutation
  author: AuthorMutation
  category: CategoryMutation
}

input ArticleAuthorsMutation {
  author: String
}

input ArticleCategoriesMutation {
  category: String
}

input ArticleMutation {
  title: String
  subtitle: String
  slug: String
  authors: [ArticleAuthorsMutation]
  image: String
  date: String
  description: String
  categories: [ArticleCategoriesMutation]
  featured: Boolean
  body: JSON
}

input AuthorMutation {
  title: String
  slug: String
  email: String
  first_name: String
  twitter: String
  github: String
  linkedin: String
  bio: String
  image: String
  avif: String
  avif_base64: String
  image_base64: String
}

input CategoryRelatedMutation {
  category: String
}

input CategoryMutation {
  title: String
  slug: String
  related: [CategoryRelatedMutation]
  description: String
}

schema {
  query: Query
  mutation: Mutation
}
  