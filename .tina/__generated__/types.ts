//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
import { gql } from 'tinacms';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String'];
  basename: Scalars['String'];
  breadcrumbs: Array<Scalars['String']>;
  path: Scalars['String'];
  relativePath: Scalars['String'];
  extension: Scalars['String'];
  template: Scalars['String'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']>;
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean'];
  hasNextPage: Scalars['Boolean'];
  startCursor: Scalars['String'];
  endCursor: Scalars['String'];
};

export type Node = {
  id: Scalars['ID'];
};

export type Document = {
  id: Scalars['ID'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  article: Article;
  articleConnection: ArticleConnection;
  author: Author;
  authorConnection: AuthorConnection;
  category: Category;
  categoryConnection: CategoryConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryArticleArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryArticleConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ArticleFilter>;
};


export type QueryAuthorArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryAuthorConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<AuthorFilter>;
};


export type QueryCategoryArgs = {
  relativePath?: InputMaybe<Scalars['String']>;
};


export type QueryCategoryConnectionArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<CategoryFilter>;
};

export type DocumentFilter = {
  article?: InputMaybe<ArticleFilter>;
  author?: InputMaybe<AuthorFilter>;
  category?: InputMaybe<CategoryFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String'];
  slug: Scalars['String'];
  label?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  format?: Maybe<Scalars['String']>;
  matches?: Maybe<Scalars['String']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Float']>;
  last?: InputMaybe<Scalars['Float']>;
  sort?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<DocumentFilter>;
};

export type DocumentNode = Article | Author | Category;

export type ArticleAuthorsAuthor = Author;

export type ArticleAuthors = {
  __typename?: 'ArticleAuthors';
  author?: Maybe<ArticleAuthorsAuthor>;
};

export type ArticleCategoriesCategory = Category;

export type ArticleCategories = {
  __typename?: 'ArticleCategories';
  category?: Maybe<ArticleCategoriesCategory>;
};

export type Article = Node & Document & {
  __typename?: 'Article';
  title?: Maybe<Scalars['String']>;
  subtitle?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  authors?: Maybe<Array<Maybe<ArticleAuthors>>>;
  image?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  categories?: Maybe<Array<Maybe<ArticleCategories>>>;
  featured?: Maybe<Scalars['Boolean']>;
  body?: Maybe<Scalars['JSON']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type ArticleAuthorsAuthorFilter = {
  author?: InputMaybe<AuthorFilter>;
};

export type ArticleAuthorsFilter = {
  author?: InputMaybe<ArticleAuthorsAuthorFilter>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  exists?: InputMaybe<Scalars['Boolean']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export type ArticleCategoriesCategoryFilter = {
  category?: InputMaybe<CategoryFilter>;
};

export type ArticleCategoriesFilter = {
  category?: InputMaybe<ArticleCategoriesCategoryFilter>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']>;
  exists?: InputMaybe<Scalars['Boolean']>;
};

export type ArticleBodyCaptionedImageFilter = {
  imgUrl?: InputMaybe<StringFilter>;
  caption?: InputMaybe<StringFilter>;
  alt?: InputMaybe<StringFilter>;
};

export type ArticleBodyTweetFilter = {
  tweetId?: InputMaybe<StringFilter>;
};

export type ArticleBodyPullQuoteFilter = {
  children?: InputMaybe<StringFilter>;
};

export type ArticleBodyFilter = {
  CaptionedImage?: InputMaybe<ArticleBodyCaptionedImageFilter>;
  Tweet?: InputMaybe<ArticleBodyTweetFilter>;
  PullQuote?: InputMaybe<ArticleBodyPullQuoteFilter>;
};

export type ArticleFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  authors?: InputMaybe<ArticleAuthorsFilter>;
  image?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  description?: InputMaybe<StringFilter>;
  categories?: InputMaybe<ArticleCategoriesFilter>;
  featured?: InputMaybe<BooleanFilter>;
  body?: InputMaybe<ArticleBodyFilter>;
};

export type ArticleConnectionEdges = {
  __typename?: 'ArticleConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Article>;
};

export type ArticleConnection = Connection & {
  __typename?: 'ArticleConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<ArticleConnectionEdges>>>;
};

export type Author = Node & Document & {
  __typename?: 'Author';
  title?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  first_name?: Maybe<Scalars['String']>;
  twitter?: Maybe<Scalars['String']>;
  github?: Maybe<Scalars['String']>;
  linkedin?: Maybe<Scalars['String']>;
  bio?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  avif?: Maybe<Scalars['String']>;
  avif_base64?: Maybe<Scalars['String']>;
  image_base64?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type AuthorFilter = {
  title?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
  first_name?: InputMaybe<StringFilter>;
  twitter?: InputMaybe<StringFilter>;
  github?: InputMaybe<StringFilter>;
  linkedin?: InputMaybe<StringFilter>;
  bio?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
  avif?: InputMaybe<StringFilter>;
  avif_base64?: InputMaybe<StringFilter>;
  image_base64?: InputMaybe<StringFilter>;
};

export type AuthorConnectionEdges = {
  __typename?: 'AuthorConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Author>;
};

export type AuthorConnection = Connection & {
  __typename?: 'AuthorConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<AuthorConnectionEdges>>>;
};

export type CategoryRelatedCategory = Category;

export type CategoryRelated = {
  __typename?: 'CategoryRelated';
  category?: Maybe<CategoryRelatedCategory>;
};

export type Category = Node & Document & {
  __typename?: 'Category';
  title?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  related?: Maybe<Array<Maybe<CategoryRelated>>>;
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  _sys: SystemInfo;
  _values: Scalars['JSON'];
};

export type CategoryRelatedCategoryFilter = {
  category?: InputMaybe<CategoryFilter>;
};

export type CategoryRelatedFilter = {
  category?: InputMaybe<CategoryRelatedCategoryFilter>;
};

export type CategoryFilter = {
  title?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  related?: InputMaybe<CategoryRelatedFilter>;
  description?: InputMaybe<StringFilter>;
};

export type CategoryConnectionEdges = {
  __typename?: 'CategoryConnectionEdges';
  cursor: Scalars['String'];
  node?: Maybe<Category>;
};

export type CategoryConnection = Connection & {
  __typename?: 'CategoryConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float'];
  edges?: Maybe<Array<Maybe<CategoryConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateArticle: Article;
  createArticle: Article;
  updateAuthor: Author;
  createAuthor: Author;
  updateCategory: Category;
  createCategory: Category;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String'];
  relativePath: Scalars['String'];
  template?: InputMaybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']>;
  relativePath: Scalars['String'];
  params: DocumentMutation;
};


export type MutationUpdateArticleArgs = {
  relativePath: Scalars['String'];
  params: ArticleMutation;
};


export type MutationCreateArticleArgs = {
  relativePath: Scalars['String'];
  params: ArticleMutation;
};


export type MutationUpdateAuthorArgs = {
  relativePath: Scalars['String'];
  params: AuthorMutation;
};


export type MutationCreateAuthorArgs = {
  relativePath: Scalars['String'];
  params: AuthorMutation;
};


export type MutationUpdateCategoryArgs = {
  relativePath: Scalars['String'];
  params: CategoryMutation;
};


export type MutationCreateCategoryArgs = {
  relativePath: Scalars['String'];
  params: CategoryMutation;
};

export type DocumentMutation = {
  article?: InputMaybe<ArticleMutation>;
  author?: InputMaybe<AuthorMutation>;
  category?: InputMaybe<CategoryMutation>;
};

export type ArticleAuthorsMutation = {
  author?: InputMaybe<Scalars['String']>;
};

export type ArticleCategoriesMutation = {
  category?: InputMaybe<Scalars['String']>;
};

export type ArticleMutation = {
  title?: InputMaybe<Scalars['String']>;
  subtitle?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  authors?: InputMaybe<Array<InputMaybe<ArticleAuthorsMutation>>>;
  image?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  categories?: InputMaybe<Array<InputMaybe<ArticleCategoriesMutation>>>;
  featured?: InputMaybe<Scalars['Boolean']>;
  body?: InputMaybe<Scalars['JSON']>;
};

export type AuthorMutation = {
  title?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  twitter?: InputMaybe<Scalars['String']>;
  github?: InputMaybe<Scalars['String']>;
  linkedin?: InputMaybe<Scalars['String']>;
  bio?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['String']>;
  avif?: InputMaybe<Scalars['String']>;
  avif_base64?: InputMaybe<Scalars['String']>;
  image_base64?: InputMaybe<Scalars['String']>;
};

export type CategoryRelatedMutation = {
  category?: InputMaybe<Scalars['String']>;
};

export type CategoryMutation = {
  title?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  related?: InputMaybe<Array<InputMaybe<CategoryRelatedMutation>>>;
  description?: InputMaybe<Scalars['String']>;
};

export type GetArticleQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type GetArticleQuery = { __typename?: 'Query', article: { __typename?: 'Article', title?: string | null, slug?: string | null, image?: string | null, subtitle?: string | null, date?: string | null, description?: string | null, body?: any | null, authors?: Array<{ __typename?: 'ArticleAuthors', author?: { __typename?: 'Author', title?: string | null, first_name?: string | null, twitter?: string | null, image?: string | null, bio?: string | null } | null } | null> | null, categories?: Array<{ __typename?: 'ArticleCategories', category?: { __typename?: 'Category', title?: string | null } | null } | null> | null } };

export type GetCategoryQueryVariables = Exact<{
  relativePath?: InputMaybe<Scalars['String']>;
}>;


export type GetCategoryQuery = { __typename?: 'Query', category: { __typename?: 'Category', title?: string | null, slug?: string | null, description?: string | null, related?: Array<{ __typename?: 'CategoryRelated', category?: { __typename?: 'Category', title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string } } | null } | null> | null } };

export type GetArticlesByCategoryQueryVariables = Exact<{
  category?: InputMaybe<Scalars['String']>;
}>;


export type GetArticlesByCategoryQuery = { __typename?: 'Query', articleConnection: { __typename?: 'ArticleConnection', edges?: Array<{ __typename?: 'ArticleConnectionEdges', node?: { __typename?: 'Article', title?: string | null, slug?: string | null, image?: string | null, _sys: { __typename?: 'SystemInfo', filename: string }, categories?: Array<{ __typename?: 'ArticleCategories', category?: { __typename?: 'Category', title?: string | null, slug?: string | null, description?: string | null } | null } | null> | null, authors?: Array<{ __typename?: 'ArticleAuthors', author?: { __typename?: 'Author', title?: string | null } | null } | null> | null } | null } | null> | null } };

export type GetArticlesByAuthorQueryVariables = Exact<{
  author?: InputMaybe<Scalars['String']>;
}>;


export type GetArticlesByAuthorQuery = { __typename?: 'Query', articleConnection: { __typename?: 'ArticleConnection', edges?: Array<{ __typename?: 'ArticleConnectionEdges', node?: { __typename?: 'Article', title?: string | null, slug?: string | null, image?: string | null, _sys: { __typename?: 'SystemInfo', filename: string }, categories?: Array<{ __typename?: 'ArticleCategories', category?: { __typename?: 'Category', title?: string | null, slug?: string | null, description?: string | null } | null } | null> | null, authors?: Array<{ __typename?: 'ArticleAuthors', author?: { __typename?: 'Author', title?: string | null } | null } | null> | null } | null } | null> | null } };

export type ArticlePartsFragment = { __typename?: 'Article', title?: string | null, subtitle?: string | null, slug?: string | null, image?: string | null, date?: string | null, description?: string | null, featured?: boolean | null, body?: any | null, authors?: Array<{ __typename: 'ArticleAuthors', author?: { __typename?: 'Author', id: string } | null } | null> | null, categories?: Array<{ __typename: 'ArticleCategories', category?: { __typename?: 'Category', id: string } | null } | null> | null };

export type AuthorPartsFragment = { __typename?: 'Author', title?: string | null, slug?: string | null, email?: string | null, first_name?: string | null, twitter?: string | null, github?: string | null, linkedin?: string | null, bio?: string | null, image?: string | null, avif?: string | null, avif_base64?: string | null, image_base64?: string | null };

export type CategoryPartsFragment = { __typename?: 'Category', title?: string | null, slug?: string | null, description?: string | null, related?: Array<{ __typename: 'CategoryRelated', category?: { __typename?: 'Category', id: string } | null } | null> | null };

export type ArticleQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type ArticleQuery = { __typename?: 'Query', article: { __typename?: 'Article', id: string, title?: string | null, subtitle?: string | null, slug?: string | null, image?: string | null, date?: string | null, description?: string | null, featured?: boolean | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, authors?: Array<{ __typename: 'ArticleAuthors', author?: { __typename?: 'Author', id: string } | null } | null> | null, categories?: Array<{ __typename: 'ArticleCategories', category?: { __typename?: 'Category', id: string } | null } | null> | null } };

export type ArticleConnectionQueryVariables = Exact<{ [key: string]: never; }>;


export type ArticleConnectionQuery = { __typename?: 'Query', articleConnection: { __typename?: 'ArticleConnection', totalCount: number, edges?: Array<{ __typename?: 'ArticleConnectionEdges', node?: { __typename?: 'Article', id: string, title?: string | null, subtitle?: string | null, slug?: string | null, image?: string | null, date?: string | null, description?: string | null, featured?: boolean | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, authors?: Array<{ __typename: 'ArticleAuthors', author?: { __typename?: 'Author', id: string } | null } | null> | null, categories?: Array<{ __typename: 'ArticleCategories', category?: { __typename?: 'Category', id: string } | null } | null> | null } | null } | null> | null } };

export type AuthorQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type AuthorQuery = { __typename?: 'Query', author: { __typename?: 'Author', id: string, title?: string | null, slug?: string | null, email?: string | null, first_name?: string | null, twitter?: string | null, github?: string | null, linkedin?: string | null, bio?: string | null, image?: string | null, avif?: string | null, avif_base64?: string | null, image_base64?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type AuthorConnectionQueryVariables = Exact<{ [key: string]: never; }>;


export type AuthorConnectionQuery = { __typename?: 'Query', authorConnection: { __typename?: 'AuthorConnection', totalCount: number, edges?: Array<{ __typename?: 'AuthorConnectionEdges', node?: { __typename?: 'Author', id: string, title?: string | null, slug?: string | null, email?: string | null, first_name?: string | null, twitter?: string | null, github?: string | null, linkedin?: string | null, bio?: string | null, image?: string | null, avif?: string | null, avif_base64?: string | null, image_base64?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type CategoryQueryVariables = Exact<{
  relativePath: Scalars['String'];
}>;


export type CategoryQuery = { __typename?: 'Query', category: { __typename?: 'Category', id: string, title?: string | null, slug?: string | null, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, related?: Array<{ __typename: 'CategoryRelated', category?: { __typename?: 'Category', id: string } | null } | null> | null } };

export type CategoryConnectionQueryVariables = Exact<{ [key: string]: never; }>;


export type CategoryConnectionQuery = { __typename?: 'Query', categoryConnection: { __typename?: 'CategoryConnection', totalCount: number, edges?: Array<{ __typename?: 'CategoryConnectionEdges', node?: { __typename?: 'Category', id: string, title?: string | null, slug?: string | null, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, related?: Array<{ __typename: 'CategoryRelated', category?: { __typename?: 'Category', id: string } | null } | null> | null } | null } | null> | null } };

export const ArticlePartsFragmentDoc = gql`
    fragment ArticleParts on Article {
  title
  subtitle
  slug
  authors {
    __typename
    author {
      ... on Document {
        id
      }
    }
  }
  image
  date
  description
  categories {
    __typename
    category {
      ... on Document {
        id
      }
    }
  }
  featured
  body
}
    `;
export const AuthorPartsFragmentDoc = gql`
    fragment AuthorParts on Author {
  title
  slug
  email
  first_name
  twitter
  github
  linkedin
  bio
  image
  avif
  avif_base64
  image_base64
}
    `;
export const CategoryPartsFragmentDoc = gql`
    fragment CategoryParts on Category {
  title
  slug
  related {
    __typename
    category {
      ... on Document {
        id
      }
    }
  }
  description
}
    `;
export const GetArticleDocument = gql`
    query getArticle($relativePath: String!) {
  article(relativePath: $relativePath) {
    title
    slug
    authors {
      author {
        ... on Author {
          title
          first_name
          twitter
          image
          bio
        }
      }
    }
    image
    subtitle
    date
    description
    categories {
      category {
        ... on Category {
          title
        }
      }
    }
    body
  }
}
    `;
export const GetCategoryDocument = gql`
    query getCategory($relativePath: String) {
  category(relativePath: $relativePath) {
    title
    slug
    description
    related {
      category {
        ... on Category {
          _sys {
            filename
          }
          title
        }
      }
    }
  }
}
    `;
export const GetArticlesByCategoryDocument = gql`
    query getArticlesByCategory($category: String) {
  articleConnection(
    filter: {categories: {category: {category: {slug: {eq: $category}}}}}
  ) {
    edges {
      node {
        _sys {
          filename
        }
        title
        slug
        image
        categories {
          category {
            ... on Category {
              title
              slug
              description
            }
          }
        }
        authors {
          author {
            ... on Author {
              title
            }
          }
        }
      }
    }
  }
}
    `;
export const GetArticlesByAuthorDocument = gql`
    query getArticlesByAuthor($author: String) {
  articleConnection(filter: {authors: {author: {author: {slug: {eq: $author}}}}}) {
    edges {
      node {
        _sys {
          filename
        }
        title
        slug
        image
        categories {
          category {
            ... on Category {
              title
              slug
              description
            }
          }
        }
        authors {
          author {
            ... on Author {
              title
            }
          }
        }
      }
    }
  }
}
    `;
export const ArticleDocument = gql`
    query article($relativePath: String!) {
  article(relativePath: $relativePath) {
    _sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    ...ArticleParts
  }
}
    ${ArticlePartsFragmentDoc}`;
export const ArticleConnectionDocument = gql`
    query articleConnection {
  articleConnection {
    totalCount
    edges {
      node {
        id
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        ...ArticleParts
      }
    }
  }
}
    ${ArticlePartsFragmentDoc}`;
export const AuthorDocument = gql`
    query author($relativePath: String!) {
  author(relativePath: $relativePath) {
    _sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    ...AuthorParts
  }
}
    ${AuthorPartsFragmentDoc}`;
export const AuthorConnectionDocument = gql`
    query authorConnection {
  authorConnection {
    totalCount
    edges {
      node {
        id
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        ...AuthorParts
      }
    }
  }
}
    ${AuthorPartsFragmentDoc}`;
export const CategoryDocument = gql`
    query category($relativePath: String!) {
  category(relativePath: $relativePath) {
    _sys {
      filename
      basename
      breadcrumbs
      path
      relativePath
      extension
    }
    id
    ...CategoryParts
  }
}
    ${CategoryPartsFragmentDoc}`;
export const CategoryConnectionDocument = gql`
    query categoryConnection {
  categoryConnection {
    totalCount
    edges {
      node {
        id
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        ...CategoryParts
      }
    }
  }
}
    ${CategoryPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      getArticle(variables: GetArticleQueryVariables, options?: C): Promise<{data: GetArticleQuery, variables: GetArticleQueryVariables, query: string}> {
        return requester<{data: GetArticleQuery, variables: GetArticleQueryVariables, query: string}, GetArticleQueryVariables>(GetArticleDocument, variables, options);
      },
    getCategory(variables?: GetCategoryQueryVariables, options?: C): Promise<{data: GetCategoryQuery, variables: GetCategoryQueryVariables, query: string}> {
        return requester<{data: GetCategoryQuery, variables: GetCategoryQueryVariables, query: string}, GetCategoryQueryVariables>(GetCategoryDocument, variables, options);
      },
    getArticlesByCategory(variables?: GetArticlesByCategoryQueryVariables, options?: C): Promise<{data: GetArticlesByCategoryQuery, variables: GetArticlesByCategoryQueryVariables, query: string}> {
        return requester<{data: GetArticlesByCategoryQuery, variables: GetArticlesByCategoryQueryVariables, query: string}, GetArticlesByCategoryQueryVariables>(GetArticlesByCategoryDocument, variables, options);
      },
    getArticlesByAuthor(variables?: GetArticlesByAuthorQueryVariables, options?: C): Promise<{data: GetArticlesByAuthorQuery, variables: GetArticlesByAuthorQueryVariables, query: string}> {
        return requester<{data: GetArticlesByAuthorQuery, variables: GetArticlesByAuthorQueryVariables, query: string}, GetArticlesByAuthorQueryVariables>(GetArticlesByAuthorDocument, variables, options);
      },
    article(variables: ArticleQueryVariables, options?: C): Promise<{data: ArticleQuery, variables: ArticleQueryVariables, query: string}> {
        return requester<{data: ArticleQuery, variables: ArticleQueryVariables, query: string}, ArticleQueryVariables>(ArticleDocument, variables, options);
      },
    articleConnection(variables?: ArticleConnectionQueryVariables, options?: C): Promise<{data: ArticleConnectionQuery, variables: ArticleConnectionQueryVariables, query: string}> {
        return requester<{data: ArticleConnectionQuery, variables: ArticleConnectionQueryVariables, query: string}, ArticleConnectionQueryVariables>(ArticleConnectionDocument, variables, options);
      },
    author(variables: AuthorQueryVariables, options?: C): Promise<{data: AuthorQuery, variables: AuthorQueryVariables, query: string}> {
        return requester<{data: AuthorQuery, variables: AuthorQueryVariables, query: string}, AuthorQueryVariables>(AuthorDocument, variables, options);
      },
    authorConnection(variables?: AuthorConnectionQueryVariables, options?: C): Promise<{data: AuthorConnectionQuery, variables: AuthorConnectionQueryVariables, query: string}> {
        return requester<{data: AuthorConnectionQuery, variables: AuthorConnectionQueryVariables, query: string}, AuthorConnectionQueryVariables>(AuthorConnectionDocument, variables, options);
      },
    category(variables: CategoryQueryVariables, options?: C): Promise<{data: CategoryQuery, variables: CategoryQueryVariables, query: string}> {
        return requester<{data: CategoryQuery, variables: CategoryQueryVariables, query: string}, CategoryQueryVariables>(CategoryDocument, variables, options);
      },
    categoryConnection(variables?: CategoryConnectionQueryVariables, options?: C): Promise<{data: CategoryConnectionQuery, variables: CategoryConnectionQueryVariables, query: string}> {
        return requester<{data: CategoryConnectionQuery, variables: CategoryConnectionQueryVariables, query: string}, CategoryConnectionQueryVariables>(CategoryConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { staticRequest } from 'tinacms'
const requester: (doc: any, vars?: any, options?: any) => Promise<any> = async (
  doc,
  vars,
  _options
) => {
  let data = {}
  try {
    data = await staticRequest({
      query: doc,
      variables: vars,
    })
  } catch (e) {
    // swallow errors related to document creation
    console.warn('Warning: There was an error when fetching data')
    console.warn(e)
  }

  return { data, query: doc, variables: vars || {} }
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = ()=>getSdk(requester)

